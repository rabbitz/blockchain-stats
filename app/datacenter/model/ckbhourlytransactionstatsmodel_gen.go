// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ckbHourlyTransactionStatsFieldNames          = builder.RawFieldNames(&CkbHourlyTransactionStats{})
	ckbHourlyTransactionStatsRows                = strings.Join(ckbHourlyTransactionStatsFieldNames, ",")
	ckbHourlyTransactionStatsRowsExpectAutoSet   = strings.Join(stringx.Remove(ckbHourlyTransactionStatsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ckbHourlyTransactionStatsRowsWithPlaceHolder = strings.Join(stringx.Remove(ckbHourlyTransactionStatsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCkbHourlyTransactionStatsIdPrefix        = "cache:ckbHourlyTransactionStats:id:"
	cacheCkbHourlyTransactionStatsTimestampPrefix = "cache:ckbHourlyTransactionStats:timestamp:"
)

type (
	ckbHourlyTransactionStatsModel interface {
		Insert(ctx context.Context, data *CkbHourlyTransactionStats) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CkbHourlyTransactionStats, error)
		FindOneByTimestamp(ctx context.Context, timestamp sql.NullInt64) (*CkbHourlyTransactionStats, error)
		Update(ctx context.Context, data *CkbHourlyTransactionStats) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCkbHourlyTransactionStatsModel struct {
		sqlc.CachedConn
		table string
	}

	CkbHourlyTransactionStats struct {
		Id                  int64         `db:"id"`                   // id primary key
		Timestamp           sql.NullInt64 `db:"timestamp"`            // stats timestamp
		TransactionCount    int64         `db:"transaction_count"`    // hourly total transaction count
		TransactionCapacity float64       `db:"transaction_capacity"` // hourly total transaction capacity
		CreateTime          time.Time     `db:"create_time"`          // created time
		UpdateTime          time.Time     `db:"update_time"`          // updated time
	}
)

func newCkbHourlyTransactionStatsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCkbHourlyTransactionStatsModel {
	return &defaultCkbHourlyTransactionStatsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ckb_hourly_transaction_stats`",
	}
}

func (m *defaultCkbHourlyTransactionStatsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ckbHourlyTransactionStatsIdKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsIdPrefix, id)
	ckbHourlyTransactionStatsTimestampKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsTimestampPrefix, data.Timestamp)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ckbHourlyTransactionStatsIdKey, ckbHourlyTransactionStatsTimestampKey)
	return err
}

func (m *defaultCkbHourlyTransactionStatsModel) FindOne(ctx context.Context, id int64) (*CkbHourlyTransactionStats, error) {
	ckbHourlyTransactionStatsIdKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsIdPrefix, id)
	var resp CkbHourlyTransactionStats
	err := m.QueryRowCtx(ctx, &resp, ckbHourlyTransactionStatsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ckbHourlyTransactionStatsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCkbHourlyTransactionStatsModel) FindOneByTimestamp(ctx context.Context, timestamp sql.NullInt64) (*CkbHourlyTransactionStats, error) {
	ckbHourlyTransactionStatsTimestampKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsTimestampPrefix, timestamp)
	var resp CkbHourlyTransactionStats
	err := m.QueryRowIndexCtx(ctx, &resp, ckbHourlyTransactionStatsTimestampKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `timestamp` = ? limit 1", ckbHourlyTransactionStatsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, timestamp); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCkbHourlyTransactionStatsModel) Insert(ctx context.Context, data *CkbHourlyTransactionStats) (sql.Result, error) {
	ckbHourlyTransactionStatsIdKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsIdPrefix, data.Id)
	ckbHourlyTransactionStatsTimestampKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsTimestampPrefix, data.Timestamp)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, ckbHourlyTransactionStatsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Timestamp, data.TransactionCount, data.TransactionCapacity)
	}, ckbHourlyTransactionStatsIdKey, ckbHourlyTransactionStatsTimestampKey)
	return ret, err
}

func (m *defaultCkbHourlyTransactionStatsModel) Update(ctx context.Context, newData *CkbHourlyTransactionStats) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ckbHourlyTransactionStatsIdKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsIdPrefix, data.Id)
	ckbHourlyTransactionStatsTimestampKey := fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsTimestampPrefix, data.Timestamp)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ckbHourlyTransactionStatsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Timestamp, newData.TransactionCount, newData.TransactionCapacity, newData.Id)
	}, ckbHourlyTransactionStatsIdKey, ckbHourlyTransactionStatsTimestampKey)
	return err
}

func (m *defaultCkbHourlyTransactionStatsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCkbHourlyTransactionStatsIdPrefix, primary)
}

func (m *defaultCkbHourlyTransactionStatsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ckbHourlyTransactionStatsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCkbHourlyTransactionStatsModel) tableName() string {
	return m.table
}
